--- orig/FastNoiseSIMD.cpp	2020-01-14 23:57:13.921520500 +0800
+++ FastNoiseSIMD.cpp	2020-03-01 21:41:09.159204000 +0800
@@ -74,7 +74,7 @@
 #include "inttypes.h"
 #endif
 
-int FastNoiseSIMD::s_currentSIMDLevel = -1;
+int _FastNoiseSIMD::s_currentSIMDLevel = -1;
 
 #ifdef FN_ARM
 int GetFastestSIMD()
@@ -181,7 +181,7 @@
 }
 #endif
 
-FastNoiseSIMD* FastNoiseSIMD::NewFastNoiseSIMD(int seed)
+_FastNoiseSIMD* _FastNoiseSIMD::NewFastNoiseSIMD(int seed)
 {
 	GetSIMDLevel();
 
@@ -219,7 +219,7 @@
 #endif
 }
 
-int FastNoiseSIMD::GetSIMDLevel()
+int _FastNoiseSIMD::GetSIMDLevel()
 {
 	if (s_currentSIMDLevel < 0)
 		s_currentSIMDLevel = GetFastestSIMD();
@@ -227,7 +227,7 @@
 	return s_currentSIMDLevel;
 }
 
-void FastNoiseSIMD::FreeNoiseSet(float* floatArray)
+void _FastNoiseSIMD::FreeNoiseSet(float* floatArray)
 {
 #ifdef FN_ALIGNED_SETS
 	GetSIMDLevel();
@@ -243,7 +243,7 @@
 		delete[] floatArray;
 }
 
-int FastNoiseSIMD::AlignedSize(int size)
+int _FastNoiseSIMD::AlignedSize(int size)
 {
 #ifdef FN_ALIGNED_SETS
 	GetSIMDLevel();
@@ -271,7 +271,7 @@
 	return size;
 }
 
-float* FastNoiseSIMD::GetEmptySet(int size)
+float* _FastNoiseSIMD::GetEmptySet(int size)
 {
 #ifdef FN_ALIGNED_SETS
 	GetSIMDLevel();
@@ -299,14 +299,14 @@
 	return new float[size];
 }
 
-FastNoiseVectorSet* FastNoiseSIMD::GetVectorSet(int xSize, int ySize, int zSize)
+FastNoiseVectorSet* _FastNoiseSIMD::GetVectorSet(int xSize, int ySize, int zSize)
 {
 	FastNoiseVectorSet* vectorSet = new FastNoiseVectorSet();
 	FillVectorSet(vectorSet, xSize, ySize, zSize);
 	return vectorSet;
 }
 
-void FastNoiseSIMD::FillVectorSet(FastNoiseVectorSet* vectorSet, int xSize, int ySize, int zSize)
+void _FastNoiseSIMD::FillVectorSet(FastNoiseVectorSet* vectorSet, int xSize, int ySize, int zSize)
 {
 	assert(vectorSet);
 
@@ -330,14 +330,14 @@
 	}
 }
 
-FastNoiseVectorSet* FastNoiseSIMD::GetSamplingVectorSet(int sampleScale, int xSize, int ySize, int zSize)
+FastNoiseVectorSet* _FastNoiseSIMD::GetSamplingVectorSet(int sampleScale, int xSize, int ySize, int zSize)
 {
 	FastNoiseVectorSet* vectorSet = new FastNoiseVectorSet();
 	FillSamplingVectorSet(vectorSet, sampleScale, xSize, ySize, zSize);
 	return vectorSet;
 }
 
-void FastNoiseSIMD::FillSamplingVectorSet(FastNoiseVectorSet* vectorSet, int sampleScale, int xSize, int ySize, int zSize)
+void _FastNoiseSIMD::FillSamplingVectorSet(FastNoiseVectorSet* vectorSet, int sampleScale, int xSize, int ySize, int zSize)
 {
 	assert(vectorSet);
 
@@ -391,7 +391,7 @@
 	}
 }
 
-float* FastNoiseSIMD::GetNoiseSet(int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, float scaleModifier)
+float* _FastNoiseSIMD::GetNoiseSet(int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, float scaleModifier)
 {
 	float* noiseSet = GetEmptySet(xSize, ySize, zSize);
 
@@ -400,7 +400,7 @@
 	return noiseSet;
 }
 
-void FastNoiseSIMD::FillNoiseSet(float* noiseSet, int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, float scaleModifier)
+void _FastNoiseSIMD::FillNoiseSet(float* noiseSet, int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, float scaleModifier)
 {
 	switch (m_noiseType)
 	{
@@ -416,12 +416,14 @@
 	case PerlinFractal:
 		FillPerlinFractalSet(noiseSet, xStart, yStart, zStart, xSize, ySize, zSize, scaleModifier);
 		break;
+#ifdef ENABLE_SIMPLEX
 	case Simplex:
 		FillSimplexSet(noiseSet, xStart, yStart, zStart, xSize, ySize, zSize, scaleModifier);
 		break;
 	case SimplexFractal:
 		FillSimplexFractalSet(noiseSet, xStart, yStart, zStart, xSize, ySize, zSize, scaleModifier);
 		break;
+#endif
 	case WhiteNoise:
 		FillWhiteNoiseSet(noiseSet, xStart, yStart, zStart, xSize, ySize, zSize, scaleModifier);
 		break;
@@ -439,7 +441,7 @@
 	}
 }
 
-void FastNoiseSIMD::FillNoiseSet(float* noiseSet, FastNoiseVectorSet* vectorSet, float xOffset, float yOffset, float zOffset)
+void _FastNoiseSIMD::FillNoiseSet(float* noiseSet, FastNoiseVectorSet* vectorSet, float xOffset, float yOffset, float zOffset)
 {
 	switch (m_noiseType)
 	{
@@ -455,12 +457,14 @@
 	case PerlinFractal:
 		FillPerlinFractalSet(noiseSet, vectorSet, xOffset, yOffset, zOffset);
 		break;
+#ifdef ENABLE_SIMPLEX
 	case Simplex:
 		FillSimplexSet(noiseSet, vectorSet, xOffset, yOffset, zOffset);
 		break;
 	case SimplexFractal:
 		FillSimplexFractalSet(noiseSet, vectorSet, xOffset, yOffset, zOffset);
 		break;
+#endif
 	case WhiteNoise:
 		FillWhiteNoiseSet(noiseSet, vectorSet, xOffset, yOffset, zOffset);
 		break;
@@ -478,7 +482,7 @@
 	}
 }
 
-float* FastNoiseSIMD::GetSampledNoiseSet(int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, int sampleScale)
+float* _FastNoiseSIMD::GetSampledNoiseSet(int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, int sampleScale)
 {
 	float* noiseSet = GetEmptySet(xSize, ySize, zSize);
 
@@ -488,7 +492,7 @@
 }
 
 #define GET_SET(f) \
-float* FastNoiseSIMD::Get##f##Set(int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, float scaleModifier)\
+float* _FastNoiseSIMD::Get##f##Set(int xStart, int yStart, int zStart, int xSize, int ySize, int zSize, float scaleModifier)\
 {\
 	float* noiseSet = GetEmptySet(xSize, ySize, zSize);\
 	\
@@ -513,7 +517,7 @@
 GET_SET(Cubic)
 GET_SET(CubicFractal)
 
-float FastNoiseSIMD::CalculateFractalBounding(int octaves, float gain)
+float _FastNoiseSIMD::CalculateFractalBounding(int octaves, float gain)
 {
 	float amp = gain;
 	float ampFractal = 1.0f;
@@ -525,7 +529,7 @@
 	return 1.0f / ampFractal;
 }
 
-void FastNoiseSIMD::SetCellularDistance2Indicies(int cellularDistanceIndex0, int cellularDistanceIndex1)
+void _FastNoiseSIMD::SetCellularDistance2Indices(int cellularDistanceIndex0, int cellularDistanceIndex1)
 {
 	m_cellularDistanceIndex0 = std::min(cellularDistanceIndex0, cellularDistanceIndex1);
 	m_cellularDistanceIndex1 = std::max(cellularDistanceIndex0, cellularDistanceIndex1);
@@ -537,7 +541,7 @@
 void FastNoiseVectorSet::Free()
 {
 	size = -1;
-	FastNoiseSIMD::FreeNoiseSet(xSet);
+	_FastNoiseSIMD::FreeNoiseSet(xSet);
 	xSet = nullptr;
 	ySet = nullptr;
 	zSet = nullptr;
@@ -548,9 +552,9 @@
 	Free();
 	size = _size;
 
-	int alignedSize = FastNoiseSIMD::AlignedSize(size);
+	int alignedSize = _FastNoiseSIMD::AlignedSize(size);
 
-	xSet = FastNoiseSIMD::GetEmptySet(alignedSize * 3);
+	xSet = _FastNoiseSIMD::GetEmptySet(alignedSize * 3);
 	ySet = xSet + alignedSize;
 	zSet = ySet + alignedSize;
 }
--- orig/FastNoiseSIMD_internal.cpp	2020-01-14 23:57:13.936480400 +0800
+++ FastNoiseSIMD_internal.cpp	2020-03-01 21:41:09.159204000 +0800
@@ -1639,9 +1639,9 @@
 
 struct NoiseLookupSettings
 {
-	FastNoiseSIMD::NoiseType type;
+	_FastNoiseSIMD::NoiseType type;
 	SIMDf frequency;
-	FastNoiseSIMD::FractalType fractalType;
+	_FastNoiseSIMD::FractalType fractalType;
 	int fractalOctaves;
 	SIMDf fractalLacunarity;
 	SIMDf fractalGain;
@@ -1655,17 +1655,18 @@
 int m_octaves = noiseLookupSettings.fractalOctaves;\
 switch(noiseLookupSettings.fractalType)\
 {\
-	case FastNoiseSIMD::FBM:\
+	case _FastNoiseSIMD::FBM:\
 		{FBM_SINGLE(noiseType);}\
 		break;\
-	case FastNoiseSIMD::Billow:\
+	case _FastNoiseSIMD::Billow:\
 		{BILLOW_SINGLE(noiseType);}\
 		break;\
-	case FastNoiseSIMD::RigidMulti:\
+	case _FastNoiseSIMD::RigidMulti:\
 		{RIGIDMULTI_SINGLE(noiseType);}\
 		break;\
 }}\
 
+#ifdef ENABLE_SIMPLEX
 #define CELLULAR_LOOKUP_SINGLE(distanceFunc)\
 static SIMDf VECTORCALL FUNC(CellularLookup##distanceFunc##Single)(SIMDi seedV, SIMDf x, SIMDf y, SIMDf z, SIMDf cellJitter, const NoiseLookupSettings& noiseLookupSettings)\
 {\
@@ -1747,28 +1748,28 @@
 	{\
 	default:\
 		break;\
-	case FastNoiseSIMD::Value:\
+	case _FastNoiseSIMD::Value:\
 		result = FUNC(ValueSingle)(seedV, xF, yF, zF); \
 		break;\
-	case FastNoiseSIMD::ValueFractal:\
+	case _FastNoiseSIMD::ValueFractal:\
 		CELLULAR_LOOKUP_FRACTAL_VALUE(Value);\
 		break; \
-	case FastNoiseSIMD::Perlin:\
+	case _FastNoiseSIMD::Perlin:\
 		result = FUNC(PerlinSingle)(seedV, xF, yF, zF); \
 		break;\
-	case FastNoiseSIMD::PerlinFractal:\
+	case _FastNoiseSIMD::PerlinFractal:\
 		CELLULAR_LOOKUP_FRACTAL_VALUE(Perlin);\
 		break; \
-	case FastNoiseSIMD::Simplex:\
+	case _FastNoiseSIMD::Simplex:\
 		result = FUNC(SimplexSingle)(seedV, xF, yF, zF); \
 		break;\
-	case FastNoiseSIMD::SimplexFractal:\
+	case _FastNoiseSIMD::SimplexFractal:\
 		CELLULAR_LOOKUP_FRACTAL_VALUE(Simplex);\
 		break; \
-	case FastNoiseSIMD::Cubic:\
+	case _FastNoiseSIMD::Cubic:\
 		result = FUNC(CubicSingle)(seedV, xF, yF, zF); \
 		break;\
-	case FastNoiseSIMD::CubicFractal:\
+	case _FastNoiseSIMD::CubicFractal:\
 		CELLULAR_LOOKUP_FRACTAL_VALUE(Cubic);\
 		break; \
 	}\
@@ -1776,6 +1777,114 @@
 	return result;\
 }
 
+#else
+
+#define CELLULAR_LOOKUP_SINGLE(distanceFunc)\
+static SIMDf VECTORCALL FUNC(CellularLookup##distanceFunc##Single)(SIMDi seedV, SIMDf x, SIMDf y, SIMDf z, SIMDf cellJitter, const NoiseLookupSettings& noiseLookupSettings)\
+{\
+	SIMDf distance = SIMDf_NUM(999999);\
+	SIMDf xCell = SIMDf_UNDEFINED();\
+	SIMDf yCell = SIMDf_UNDEFINED();\
+	SIMDf zCell = SIMDf_UNDEFINED();\
+	\
+	SIMDi xc     = SIMDi_SUB(SIMDi_CONVERT_TO_INT(x), SIMDi_NUM(1));\
+	SIMDi ycBase = SIMDi_SUB(SIMDi_CONVERT_TO_INT(y), SIMDi_NUM(1));\
+	SIMDi zcBase = SIMDi_SUB(SIMDi_CONVERT_TO_INT(z), SIMDi_NUM(1));\
+	\
+	SIMDf xcf     = SIMDf_CONVERT_TO_FLOAT(xc);\
+	SIMDf ycfBase = SIMDf_CONVERT_TO_FLOAT(ycBase);\
+	SIMDf zcfBase = SIMDf_CONVERT_TO_FLOAT(zcBase);\
+	\
+	xc     = SIMDi_MUL(xc, SIMDi_NUM(xPrime));\
+	ycBase = SIMDi_MUL(ycBase, SIMDi_NUM(yPrime));\
+	zcBase = SIMDi_MUL(zcBase, SIMDi_NUM(zPrime));\
+	\
+	for (int xi = 0; xi < 3; xi++)\
+	{\
+		SIMDf ycf = ycfBase;\
+		SIMDi yc = ycBase;\
+		SIMDf xLocal = SIMDf_SUB(xcf, x);\
+		for (int yi = 0; yi < 3; yi++)\
+		{\
+			SIMDf zcf = zcfBase;\
+			SIMDi zc = zcBase;\
+			SIMDf yLocal = SIMDf_SUB(ycf, y);\
+			for (int zi = 0; zi < 3; zi++)\
+			{\
+				SIMDf zLocal = SIMDf_SUB(zcf, z);\
+				\
+				SIMDi hash = FUNC(HashHB)(seedV, xc, yc, zc);\
+				SIMDf xd = SIMDf_SUB(SIMDf_CONVERT_TO_FLOAT(SIMDi_AND(hash, SIMDi_NUM(bit10Mask))), SIMDf_NUM(511_5));\
+				SIMDf yd = SIMDf_SUB(SIMDf_CONVERT_TO_FLOAT(SIMDi_AND(SIMDi_SHIFT_R(hash,10), SIMDi_NUM(bit10Mask))), SIMDf_NUM(511_5));\
+				SIMDf zd = SIMDf_SUB(SIMDf_CONVERT_TO_FLOAT(SIMDi_AND(SIMDi_SHIFT_R(hash,20), SIMDi_NUM(bit10Mask))), SIMDf_NUM(511_5));\
+				\
+				SIMDf invMag = SIMDf_MUL(cellJitter, SIMDf_INV_SQRT(SIMDf_MUL_ADD(xd, xd, SIMDf_MUL_ADD(yd, yd, SIMDf_MUL(zd, zd)))));\
+				\
+				SIMDf xCellNew = SIMDf_MUL(xd, invMag);\
+				SIMDf yCellNew = SIMDf_MUL(yd, invMag);\
+				SIMDf zCellNew = SIMDf_MUL(zd, invMag);\
+				\
+				xd = SIMDf_ADD(xCellNew, xLocal);\
+				yd = SIMDf_ADD(yCellNew, yLocal);\
+				zd = SIMDf_ADD(zCellNew, zLocal);\
+				\
+				xCellNew = SIMDf_ADD(xCellNew, xcf); \
+				yCellNew = SIMDf_ADD(yCellNew, ycf); \
+				zCellNew = SIMDf_ADD(zCellNew, zcf); \
+				\
+				SIMDf newDistance = distanceFunc##_DISTANCE(xd, yd, zd);\
+				\
+				MASK closer = SIMDf_LESS_THAN(newDistance, distance);\
+				\
+				distance = SIMDf_MIN(newDistance, distance);\
+				xCell = SIMDf_BLENDV(xCell, xCellNew, closer);\
+				yCell = SIMDf_BLENDV(yCell, yCellNew, closer);\
+				zCell = SIMDf_BLENDV(zCell, zCellNew, closer);\
+				\
+				zcf = SIMDf_ADD(zcf, SIMDf_NUM(1));\
+				zc = SIMDi_ADD(zc, SIMDi_NUM(zPrime));\
+			}\
+			ycf = SIMDf_ADD(ycf, SIMDf_NUM(1));\
+			yc = SIMDi_ADD(yc, SIMDi_NUM(yPrime));\
+		}\
+		xcf = SIMDf_ADD(xcf, SIMDf_NUM(1));\
+		xc = SIMDi_ADD(xc, SIMDi_NUM(xPrime));\
+	}\
+	\
+	SIMDf xF = SIMDf_MUL(xCell, noiseLookupSettings.frequency);\
+	SIMDf yF = SIMDf_MUL(yCell, noiseLookupSettings.frequency);\
+	SIMDf zF = SIMDf_MUL(zCell, noiseLookupSettings.frequency);\
+	SIMDf result;\
+	\
+	switch(noiseLookupSettings.type)\
+	{\
+	default:\
+		break;\
+	case _FastNoiseSIMD::Value:\
+		result = FUNC(ValueSingle)(seedV, xF, yF, zF); \
+		break;\
+	case _FastNoiseSIMD::ValueFractal:\
+		CELLULAR_LOOKUP_FRACTAL_VALUE(Value);\
+		break; \
+	case _FastNoiseSIMD::Perlin:\
+		result = FUNC(PerlinSingle)(seedV, xF, yF, zF); \
+		break;\
+	case _FastNoiseSIMD::PerlinFractal:\
+		CELLULAR_LOOKUP_FRACTAL_VALUE(Perlin);\
+		break; \
+	case _FastNoiseSIMD::Cubic:\
+		result = FUNC(CubicSingle)(seedV, xF, yF, zF); \
+		break;\
+	case _FastNoiseSIMD::CubicFractal:\
+		CELLULAR_LOOKUP_FRACTAL_VALUE(Cubic);\
+		break; \
+	}\
+	\
+	return result;\
+}
+
+#endif	//#ifdef ENABLE_SIMPLEX
+
 #define CELLULAR_DISTANCE_SINGLE(distanceFunc)\
 static SIMDf VECTORCALL FUNC(CellularDistance##distanceFunc##Single)(SIMDi seed, SIMDf x, SIMDf y, SIMDf z, SIMDf cellJitter)\
 {\
--- orig/FastNoiseSIMD.h	2020-01-14 23:57:13.925509900 +0800
+++ FastNoiseSIMD.h	2020-03-04 23:14:54.368820700 +0800
@@ -28,8 +28,14 @@
 
 // VERSION: 0.7.0
 
-#ifndef FASTNOISE_SIMD_H
-#define FASTNOISE_SIMD_H
+#ifndef FASTNOISE_SIMD_H__
+#define FASTNOISE_SIMD_H__
+
+// Simplex is disabled as it is protected by a patent until 2022-01-08.
+// https://patents.google.com/patent/US6867776
+// The patent covers using the algorithm for generating seamless textures.
+// Uncomment the line below to enable it and use at your own risk.
+//#define ENABLE_SIMPLEX
 
 #if defined(__arm__) || defined(__aarch64__)
 #define FN_ARM
@@ -46,7 +52,7 @@
 #define FN_COMPILE_AVX2
 
 // Only the latest compilers will support this
-//#define FN_COMPILE_AVX512
+#define FN_COMPILE_AVX512
 
 // Using FMA instructions with AVX(51)2/NEON provides a small performance increase but can cause 
 // minute variations in noise output compared to other SIMD levels due to higher calculation precision
@@ -98,19 +104,23 @@
 
 struct FastNoiseVectorSet;
 
-class FastNoiseSIMD
+class _FastNoiseSIMD
 {
 public:
 
+#ifdef ENABLE_SIMPLEX
 	enum NoiseType { Value, ValueFractal, Perlin, PerlinFractal, Simplex, SimplexFractal, WhiteNoise, Cellular, Cubic, CubicFractal };
+#else
+	enum NoiseType { Value, ValueFractal, Perlin, PerlinFractal, WhiteNoise, Cellular, Cubic, CubicFractal };
+#endif
 	enum FractalType { FBM, Billow, RigidMulti };
 	enum PerturbType { None, Gradient, GradientFractal, Normalise, Gradient_Normalise, GradientFractal_Normalise };
 
 	enum CellularDistanceFunction { Euclidean, Manhattan, Natural };
-	enum CellularReturnType { CellValue, Distance, Distance2, Distance2Add, Distance2Sub, Distance2Mul, Distance2Div, NoiseLookup, Distance2Cave };
+	enum CellularReturnType { CellValue, Distance, Distance2, Distance2Add, Distance2Sub, Distance2Mul, Distance2Div, Distance2Cave, NoiseLookup };
 
 	// Creates new FastNoiseSIMD for the highest supported instuction set of the CPU 
-	static FastNoiseSIMD* NewFastNoiseSIMD(int seed = 1337);
+	static _FastNoiseSIMD* NewFastNoiseSIMD(int seed = 1337);
 
 	// Returns highest detected level of CPU support
 	// 5: ARM NEON
@@ -156,10 +166,12 @@
 	// Sets frequency for all noise types
 	// Default: 0.01
 	void SetFrequency(float frequency) { m_frequency = frequency; }
+	float GetFrequency() { return m_frequency; }
 
 	// Sets noise return type of (Get/Fill)NoiseSet()
 	// Default: Simplex
 	void SetNoiseType(NoiseType noiseType) { m_noiseType = noiseType; }
+	NoiseType GetNoiseType() { return m_noiseType; }
 
 	// Sets scaling factor for individual axis
 	// Defaults: 1.0
@@ -169,76 +181,91 @@
 	// Sets octave count for all fractal noise types
 	// Default: 3
 	void SetFractalOctaves(int octaves) { m_octaves = octaves; m_fractalBounding = CalculateFractalBounding(m_octaves, m_gain);	}
+	int GetFractalOctaves() { return m_octaves; }
 
 	// Sets octave lacunarity for all fractal noise types
 	// Default: 2.0
 	void SetFractalLacunarity(float lacunarity) { m_lacunarity = lacunarity; }
+	float GetFractalLacunarity() { return m_lacunarity; }
 
 	// Sets octave gain for all fractal noise types
 	// Default: 0.5
 	void SetFractalGain(float gain) { m_gain = gain; m_fractalBounding = CalculateFractalBounding(m_octaves, m_gain); }
+	float GetFractalGain() { return m_gain; }
 
 	// Sets method for combining octaves in all fractal noise types
 	// Default: FBM
 	void SetFractalType(FractalType fractalType) { m_fractalType = fractalType; }
-
+	FractalType GetFractalType() { return m_fractalType; }
 
 	// Sets return type from cellular noise calculations
 	// Default: Distance
 	void SetCellularReturnType(CellularReturnType cellularReturnType) { m_cellularReturnType = cellularReturnType; }
+	CellularReturnType GetCellularReturnType() { return m_cellularReturnType; }
 
 	// Sets distance function used in cellular noise calculations
 	// Default: Euclidean
 	void SetCellularDistanceFunction(CellularDistanceFunction cellularDistanceFunction) { m_cellularDistanceFunction = cellularDistanceFunction; }
+	CellularDistanceFunction GetCellularDistanceFunction() { return m_cellularDistanceFunction; }
 
 	// Sets the type of noise used if cellular return type is set the NoiseLookup
 	// Default: Simplex
 	void SetCellularNoiseLookupType(NoiseType cellularNoiseLookupType) { m_cellularNoiseLookupType = cellularNoiseLookupType; }
+	NoiseType GetCellularNoiseLookupType() { return m_cellularNoiseLookupType; }
 
 	// Sets relative frequency on the cellular noise lookup return type
 	// Default: 0.2
 	void SetCellularNoiseLookupFrequency(float cellularNoiseLookupFrequency) { m_cellularNoiseLookupFrequency = cellularNoiseLookupFrequency; }
+	float GetCellularNoiseLookupFrequency() { return m_cellularNoiseLookupFrequency; }
 
 	// Sets the 2 distance indicies used for distance2 return types
 	// Default: 0, 1
 	// Note: index0 should be lower than index1
 	// Both indicies must be >= 0, index1 must be < 4
-	void SetCellularDistance2Indicies(int cellularDistanceIndex0, int cellularDistanceIndex1);
+	void SetCellularDistance2Indices(int cellularDistanceIndex0, int cellularDistanceIndex1);
 
 	// Sets the maximum distance a cellular point can move from it's grid position
 	// Setting this high will make artifacts more common
 	// Default: 0.45
 	void SetCellularJitter(float cellularJitter) { m_cellularJitter = cellularJitter; }
+	float GetCellularJitter() { return m_cellularJitter; }
 
 
 	// Enables position perturbing for all noise types
 	// Default: None
 	void SetPerturbType(PerturbType perturbType) { m_perturbType = perturbType; }
+	PerturbType GetPerturbType() { return m_perturbType; }
 
 	// Sets the maximum distance the input position can be perturbed
 	// Default: 1.0
 	void SetPerturbAmp(float perturbAmp) { m_perturbAmp = perturbAmp / 511.5f; }
+	float GetPerturbAmp() { return m_perturbAmp; }
 
 	// Set the relative frequency for the perturb gradient
 	// Default: 0.5
 	void SetPerturbFrequency(float perturbFrequency) { m_perturbFrequency = perturbFrequency; }
+	float GetPerturbFrequency() { return m_perturbFrequency; }
 
 
 	// Sets octave count for perturb fractal types
 	// Default: 3
 	void SetPerturbFractalOctaves(int perturbOctaves) { m_perturbOctaves = perturbOctaves; m_perturbFractalBounding = CalculateFractalBounding(m_perturbOctaves, m_perturbGain); }
+	int GetPerturbFractalOctaves() { return m_perturbOctaves; }
 
 	// Sets octave lacunarity for perturb fractal types 
 	// Default: 2.0
 	void SetPerturbFractalLacunarity(float perturbLacunarity) { m_perturbLacunarity = perturbLacunarity; }
+	float GetPerturbFractalLacunarity() { return m_perturbLacunarity; }
 	
 	// Sets octave gain for perturb fractal types 
 	// Default: 0.5
 	void SetPerturbFractalGain(float perturbGain) { m_perturbGain = perturbGain; m_perturbFractalBounding = CalculateFractalBounding(m_perturbOctaves, m_perturbGain);	}
+	float GetPerturbFractalGain() { return m_perturbGain; }
 
 	// Sets the length for vectors after perturb normalising 
 	// Default: 1.0
 	void SetPerturbNormaliseLength(float perturbNormaliseLength) { m_perturbNormaliseLength = perturbNormaliseLength; }
+	float GetPerturbNormaliseLength() { return m_perturbNormaliseLength; }
 
 
 	static FastNoiseVectorSet* GetVectorSet(int xSize, int ySize, int zSize);
@@ -290,12 +317,12 @@
 	virtual void FillCubicSet(float* noiseSet, FastNoiseVectorSet* vectorSet, float xOffset = 0.0f, float yOffset = 0.0f, float zOffset = 0.0f) = 0;
 	virtual void FillCubicFractalSet(float* noiseSet, FastNoiseVectorSet* vectorSet, float xOffset = 0.0f, float yOffset = 0.0f, float zOffset = 0.0f) = 0;
 
-	virtual ~FastNoiseSIMD() { }
+	virtual ~_FastNoiseSIMD() { }
 
 protected:
 	int m_seed = 1337;
 	float m_frequency = 0.01f;
-	NoiseType m_noiseType = SimplexFractal;
+	NoiseType m_noiseType = Value;	// Godot: Change from default SimplexFractal
 
 	float m_xScale = 1.0f;
 	float m_yScale = 1.0f;
@@ -309,7 +336,7 @@
 
 	CellularDistanceFunction m_cellularDistanceFunction = Euclidean;
 	CellularReturnType m_cellularReturnType = Distance;
-	NoiseType m_cellularNoiseLookupType = Simplex;
+	NoiseType m_cellularNoiseLookupType = Value;	// Godot: change from Simplex default
 	float m_cellularNoiseLookupFrequency = 0.2f;
 	int m_cellularDistanceIndex0 = 0;
 	int m_cellularDistanceIndex1 = 1;
@@ -362,4 +389,5 @@
 #define FN_AVX2 3
 #define FN_AVX512 4
 #define FN_NEON 5
+
 #endif
--- orig/FastNoiseSIMD_internal.h	2020-01-14 23:57:13.940469800 +0800
+++ FastNoiseSIMD_internal.h	2020-03-01 21:41:09.120461800 +0800
@@ -34,7 +34,7 @@
 
 namespace FastNoiseSIMD_internal
 {
-	class FASTNOISE_SIMD_CLASS(SIMD_LEVEL_H) : public FastNoiseSIMD
+	class FASTNOISE_SIMD_CLASS(SIMD_LEVEL_H) : public _FastNoiseSIMD
 	{
 	public:
 		// Do not call this, use SetSIMDLevel(int) to have NewFastNoiseSIMD() return the level you want
